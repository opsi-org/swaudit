encoding=utf8


DefFunc getswdetails4_32($aktkey$ : string) : void
	setloglevel = $Midloglevel$
	
	if not ($aktkey$ = "")
		set $installSize$ = "-1"
		set $binaryName$ = ""
		set $Language$ = ""
		set $licenseKey$ = ""
		Set $displayVersion$ = ""
		Set $version$ = ""
		set $winSoftwareId$ = $aktkey$
		if not ($winSoftwareId$ = "")
			set $displayVersion$ = GetRegistrystringvalue32 ("["+$uninstkey$+"\"+$aktkey$+"] DisplayVersion")
			set $displayName$ = GetRegistrystringvalue32 ("["+$uninstkey$+"\"+$aktkey$+"] displayName")
			set $binaryName$ = GetRegistrystringvalue32 ("["+$uninstkey$+"\"+$aktkey$+"] binaryName")
			set $uninstallString$ = GetRegistrystringvalue32 ("["+$uninstkey$+"\"+$aktkey$+"] uninstallString")
			set $binaryName$ = GetRegistrystringvalue32 ("["+$uninstkey$+"\"+$aktkey$+"] binaryName")
			if not($binaryName$ = "")
				if FileExists($binaryName$)
					set $VerInfoMap$ = getFileInfoMap($binaryName$)
					set $langCodeHex$ = DecStrToHexStr(getValue("Language ID 0",$VerInfoMap$),"4")
					set $Language$ = LangCodeByHex($langCodeHex$)
				endif
			endif
			create_hash4()
		endif
	endif
Endfunc

DefFunc getswdetails4_64($aktkey$ : string) : void
	if not ($aktkey$ = "")
		set $installSize$ = "-1"
		set $binaryName$ = ""
		set $Language$ = ""
		set $licenseKey$ = ""
		Set $displayVersion$ = ""
		Set $version$ = ""
		set $winSoftwareId$ = $aktkey$
		if not ($winSoftwareId$ = "")
			set $Language$ = ""
			set $binaryName$ = ""
			set $displayVersion$ = GetRegistrystringvalue64 ("["+$uninstkey$+"\"+$aktkey$+"] DisplayVersion")
			set $displayName$ = GetRegistrystringvalue64 ("["+$uninstkey$+"\"+$aktkey$+"] displayName")
			set $uninstallString$ = GetRegistrystringvalue64 ("["+$uninstkey$+"\"+$aktkey$+"] uninstallString")
			set $binaryName$ = GetRegistrystringvalue64 ("["+$uninstkey$+"\"+$aktkey$+"] binaryName")
			if not($binaryName$ = "")
				if FileExists($binaryName$)
					set $VerInfoMap$ = getFileInfoMap($binaryName$)
					set $langCodeHex$ = DecStrToHexStr(getValue("Language ID 0",$VerInfoMap$),"4")
					set $Language$ = LangCodeByHex($langCodeHex$)
				endif
			endif
			create_hash4()
		endif
	endif
Endfunc

DefFunc get_windows_info() : void
	DefVar $CurrentVersionProductName$
	DefVar $CurrentVersionCSDVersion$
	DefVar $CurrentVersionProductId$
	DefVar $CurrentVersionCurrentVersion$
	DefVar $CurrentVersionReleaseId$
	DefStringList $localeMap$
	
	set $installSize$ = "-1"
	set $binaryName$ = ""
	
	; i.e. Windows 7 professional N
	Set $CurrentVersionProductName$ = GetRegistryStringValueSysNative("[HKLM\Software\Microsoft\Windows NT\CurrentVersion] ProductName")
	; i.e. ServicePack 1
	Set $CurrentVersionCSDVersion$ = GetRegistryStringValueSysNative("[HKLM\Software\Microsoft\Windows NT\CurrentVersion] CSDVersion")
	; i.e. 00376-165-5790905-86892
	; http://wiki.lunarsoft.net/wiki/Product_IDs
	; xxxxx-yyy-zzzzzzz-zzzzz
	; xxxxx: microsoft product code (platform, build, language, and version of windows)
	; yyy:   channel id (OEM, Volume License, Retail, bundle/Not For Resale)
	Set $CurrentVersionProductId$ = GetRegistryStringValueSysNative("[HKLM\Software\Microsoft\Windows NT\CurrentVersion] ProductId")
	; i.e. 6.1
	Set $CurrentVersionCurrentVersion$ = GetRegistryStringValueSysNative("[HKLM\Software\Microsoft\Windows NT\CurrentVersion] CurrentVersion")
	
	Set $winSoftwareId$  = "ms_windows_" + takeString(0, splitString($CurrentVersionProductId$, "-")) + "-" + takeString(1, splitString($CurrentVersionProductId$, "-"))
	;Set $displayVersion$ = $CurrentVersionCurrentVersion$
	; This is 6.3 on win10 - so we use the real version from api with manifest
	Set $displayVersion$ = GetMsVersionInfo
	Set $displayName$    = $CurrentVersionProductName$
	if not ($CurrentVersionCSDVersion$ = "")
		Set $displayName$ = $displayName$ + " (" + $CurrentVersionCSDVersion$ + ")"
	endif
	; write Windows 11 in case of Windows 11
	if CompareDotSeparatedNumbers(GetMsVersionName,"=","11.0")
		Set $displayName$ = stringReplace($displayName$, "Windows 10", "Windows 11")
	endif
	; add realease id
	if CompareDotSeparatedNumbers(GetMsVersionInfo,">=","10.0")
		Set $CurrentVersionReleaseId$ = GetRegistryStringValueSysNative('[HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion] ReleaseID')
		if RegVarExists('HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion', 'Displayversion')
			Set $CurrentVersionReleaseId$ = getRegistryValue ('HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion', 'Displayversion')
		endif
		if not ($CurrentVersionReleaseId$ = "")
			Set $displayName$ = $displayName$ + " (" + $CurrentVersionReleaseId$ + ")"
		endif
	endif
	Set $uninstallString$ = ""
	Set $name$ = $displayName$
	;Set $version$ = $CurrentVersionCurrentVersion$
	; This is 6.3 on win10 - so we use the real version from api with manifest
	Set $version$ = GetMsVersionInfo
	Set $subversion$ = takeString(0, splitString($CurrentVersionProductId$, "-")) + "-" + takeString(1, splitString($CurrentVersionProductId$, "-"))
	if CompareDotSeparatedNumbers(GetMsVersionInfo,">=","10.0") and ($win10subversion$ = "win10osbuild")
		; get OS Build Version analogous https://support.microsoft.com/en-us/help/4464619
		; https://docs.microsoft.com/en-us/windows/windows-10/release-information
		Set $CurrentBuild$ = getRegistryValue("HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion", "CurrentBuild")
		Set $UBR$ = getRegistryValue("HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion", "UBR")
		Set $subversion$ = $CurrentBuild$ + "." + $UBR$
	endif
	
	set $licenseKey$ = ""
	Set $localeMap$ = getLocaleInfoMap
	Set $Language$ = getValue("system_default_lang_region",$localeMap$)
	
	if (GetSystemType = "64 Bit System")
		Set $architecture$ = "x64"
	else
		Set $architecture$ = "x86"
	endif
	create_hash4()
Endfunc

DefFunc get_nt6_hotfix_info() : void
	setloglevel = $Highloglevel$
	
	Set $displayVersion$ = ""
	Set $uninstallString$ = ""
	Set $version$ = ""
	Set $subversion$ = ""
	set $licenseKey$ = ""
	set $installSize$ = "-1"
	set $binaryName$ = ""
	set $Language$ = LangCodeByHex("0x0000")
	
	markErrorNumber
	set $resultlist$ = shellCall("wmic path Win32_QuickFixEngineering get hotfixid")
	set $resultlist$ = shellCall("wmic qfe get hotfixid")
	if errorsOccurredSinceMark > 0
		LogError "Could not get hotfixes via wmic qfe - fatal"
		set $isfatal$ = "true"
		set $fatalmessage$ = "no hotfix"
	endif
	if not(getlastexitcode = "0")
		LogError "Could not get hotfixes via wmic qfe - fatal"
		set $isfatal$ = "true"
		set $fatalmessage$ = "no hotfix"
	endif
	if contains(takestring(0,$resultlist$),"Instan")
		LogError "Could not get hotfixes via wmic qfe - fatal"
		set $isfatal$ = "true"
		set $fatalmessage$ = "no hotfix"
	endif
	if $isfatal$ = "true"
		comment "Retry with powershell ...."
		set $resultlist$ = powershellCall("Get-HotFix | select -expand HotFixID")
		if not(getlastexitcode = "0")
			LogError "Could not get hotfixes via wmic qfe - fatal"
			set $isfatal$ = "true"
			set $fatalmessage$ = "no hotfix"
		else
			set $isfatal$ = "false"
		endif
	endif
	
	set $resultlist$ = getListContaining($resultlist$, "KB")
	for %akthotfix% in $resultlist$ do sub_process_nt6_hotfix_info
	
	[sub_process_nt6_hotfix_info]
	setloglevel = $Midloglevel$
	
	Set $winSoftwareId$  = trim("%akthotfix%")
	Set $displayName$    = trim("%akthotfix%")
	Set $name$ = $displayName$
	if (GetSystemType = "64 Bit System")
		Set $architecture$ = "x64"
	else
		Set $architecture$ = "x86"
	endif
	create_hash4()
Endfunc


DefFunc getAppxDetails($aktname$ : string) : void
	DefStringlist $appxDetails$
	
	setloglevel = $Midloglevel$
	if not ($aktname$ = "")
		set $installSize$ = "-1"
		set $binaryName$ = ""
		set $Language$ = ""
		set $licenseKey$ = ""
		Set $displayVersion$ = ""
		Set $version$ = ""
		set $architecture$ = ""
		set $subversion$ = ""
		set $Language$ = ""
		set $winSoftwareId$ = $aktname$
		if not ($winSoftwareId$ = "")
			set $appxDetails$ = powershellCall('Get-AppxPackage -AllUsers  | Where-Object {$_.PackageFullName -eq "'+$aktname$+'"}')
			set $Language$ = ""
			set $binaryName$ = ""
			set $displayVersion$ = getValueBySeparator("Version",":",$appxDetails$)
			if ($displayVersion$ = 'nul') or ($displayVersion$ = 'null')
				Set $displayVersion$ = ""
			endif
			set $displayName$ = getValueBySeparator("Name",":",$appxDetails$)
			if ($displayName$ = 'nul') or ($displayName$ = 'null')
				Set $displayName$ = $winSoftwareId$
			endif
			set $architecture$ = lower(getValueBySeparator("Architecture",":",$appxDetails$))
			if ($architecture$ = "neutral") or ($architecture$ = 'nul') or ($architecture$ = 'null')
				set $architecture$ = ""
			endif
			set $uninstallString$ = ""
			create_hash4()
		endif
	endif
Endfunc

DefFunc getAppxInfos() : void
	DefStringlist $appxInfoList$
	DefVar $appxInfo$
	DefStringlist $appxInfoLineEntryList$
	DefVar $key$
	DefVar $value$
	
	setloglevel = $Midloglevel$
	; init not variable fields
	set $installSize$ = "-1"
	set $binaryName$ = ""
	set $Language$ = ""
	set $licenseKey$ = ""
	set $subversion$ = ""
	set $Language$ = ""
	set $uninstallString$ = ""
	; init variable fields
	Set $name$ = ""
	Set $version$ = ""
	set $displayName$ = ""
	set $architecture$ = ""
	set $displayVersion$ = ""
	set $winSoftwareId$ = ""
	
	set $appxInfoList$ = powershellCall('Get-AppxPackage -AllUsers | Format-List -Property Name, Architecture, Version, PackageFullName')
	for %appxInfoLine% in $appxInfoList$ do sub_handle_info_line
	
	[sub_handle_info_line]
	if not("%appxInfoLine%" = "")
		set $appxInfoLineEntryList$ = splitString("%appxInfoLine%",":")
		if count($appxInfoLineEntryList$) = "2"
			set $key$ = trim(takeString(0,$appxInfoLineEntryList$))
			set $value$ = trim(takeString(1,$appxInfoLineEntryList$))
			if $key$ = "Name"
				set $displayName$ = $value$
				if ($displayName$ = 'nul') or ($displayName$ = 'null')
					Set $displayName$ = ""
				endif
				;comment "Start with entry for: "+$displayName$
			elseif $key$ = "Architecture"
				set $architecture$ = $value$
				if ($architecture$ = "neutral") or ($architecture$ = 'nul') or ($architecture$ = 'null')
					set $architecture$ = ""
				endif
			elseif $key$ = "Version"
				set $displayVersion$ = $value$
				if ($displayVersion$ = 'nul') or ($displayVersion$ = 'null')
					Set $displayVersion$ = ""
				endif
			elseif $key$ = "PackageFullName"
				if not($value$ = "")
					set $winSoftwareId$ = $value$
					if $displayName$ = ""
						Set $displayName$ = $value$
					endif
					Set $name$ = $displayName$
					Set $version$ = $displayVersion$
					; this was the last entry, so we create the object
					;comment "Create entry for: "+$winSoftwareId$
					create_hash4()
					setloglevel = $Midloglevel$
					;comment "Finished entry for: "+$winSoftwareId$
					; init variable fields
					Set $name$ = ""
					Set $version$ = ""
					set $displayName$ = ""
					set $architecture$ = ""
					set $displayVersion$ = ""
					set $winSoftwareId$ = ""
				endif
			endif
		endif
	endif
Endfunc




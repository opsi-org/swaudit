; Copyright (c) uib GmbH <info@uib.de>
; License: AGPL-3.0

[actions]
encoding=utf8
requiredOpsiscriptVersion >= "4.12.4.37"
ScriptErrorMessages=false

DefVar $windowmode$
set $windowmode$ = GetProductProperty("windowmode", "maximized")
switch $windowmode$
	case "maximized"
		MaximizeWinst
	endcase
	case "windowed"
		NormalizeWinst
	endcase
	case "minimized"
		IconizeWinst
	endcase
endswitch

DefVar $Highloglevel$
DefVar $Midloglevel$
DefVar $Lowloglevel$
DefVar $selectedMaxLogLevel$
DefVar $ProductId$
DefVar $OpsiRegKey$
DefVar $uninstkey$
defVar $winSoftwareId$
defVar $displayVersion$
defVar $isOperatingSystem$
defVar $displayName$
defVar $uninstallString$
defVar $Language$
DefVar $clientId$
DefVar $name$
DefVar $version$
DefVar $subversion$
DefVar $architecture$
DefVar $OS$
DefVar $binaryName$
DefVar $installSize$
DefVar $langCodeHex$
DefVar $licenseKey$
DefVar $write2file$
DefVar $readfromfile$
DefVar $usefilebuffer$
DefVar $debug_send$
DefVar $exitcode$
DefVar $proccall$
DefVar $serviceMethod$
DefVar $currentKey$
DefVar $tmp$
DefVar $CurrentBuild$
DefVar $UBR$
DefVar $win10subversion$

; linux vars
DefVar $distCodeName$
DefVar $distroName$
DefVar $distRelease$
DefVar $distrotype$
DefVar $distroOS$
DefVar $distroarch$
DefVar $index$


DefStringList $linuxInfo$
DefStringList $macosInfo$
DefStringList $outLines$

DefStringlist $uninstKeys$
DefStringlist $resultlist$
DefStringlist $resultlist2$
DefStringList $VerInfoMap$
DefStringList $LicenseSections$
Defvar $softwareObject$
DefVar $softwareObjectArray$
DefStringList $softwareObjectList$
DefVar $softwareOnClientObject$
DefVar $softwareOnClientObjectArray$
DefStringList $softwareOnClientObjectList$
DefVar $include_win_hotfixes$
DefVar $isfatal$
DefVar $fatalmessage$


set $ProductId$ = "swaudit"
; windows vars
Set $OpsiRegKey$ = "HKLM\SOFTWARE\opsi.org"
Set $uninstkey$="HKEY_LOCAL_MACHINE\software\microsoft\windows\currentversion\uninstall"

importlib "swauditlib_gen.opsiscript"
importlib "swauditlib_win.opsiscript"
importlib "swauditlib_lin.opsiscript"
importlib "swauditlib_mac.opsiscript"

set $clientId$="%HostID%"
set $readfromfile$ = GetProductProperty("readfromfile","off")
set $usefilebuffer$ = GetProductProperty("usefilebuffer","off")
set $debug_send$ = GetProductProperty("debug_send","false")
set $win10subversion$ = GetProductProperty("win10subversion","hklmproductid")

set $include_win_hotfixes$ = "true"
set $Highloglevel$ = "7"
set $Midloglevel$ = "5"
set $Lowloglevel$ = "4"
set $isfatal$ = "false"
;set $Highloglevel$ = "5"
;set $Midloglevel$ = "5"
;set $Lowloglevel$ = "6"

set $selectedMaxLogLevel$ = GetProductProperty("maxloglevel",$Highloglevel$)

if $selectedMaxLogLevel$ INT< $Lowloglevel$
	set $Lowloglevel$ = $selectedMaxLogLevel$
endif

if $selectedMaxLogLevel$ INT< $Midloglevel$
	set $Midloglevel$ = $selectedMaxLogLevel$
endif

if $selectedMaxLogLevel$ INT< $Highloglevel$
	set $Highloglevel$ = $selectedMaxLogLevel$
endif


setloglevel = 5

Message "Running software audit..."
ShowBitmap "%SCRIPTPATH%\swaudit.png" "Software Inventarisierung"

set $OS$ = GetOS

if not(($OS$ = "Linux") or ($OS$ = "Windows_NT") or ($OS$ = "macos"))
	logError "Run aborted: only Windows, macOS and Linux supported"
	isFatalError "OS not supported"
endif

if $OS$ = "Windows_NT"
	if CompareDotSeparatedNumbers(GetMsVersionInfo,"<","5.1")
		logError "Run aborted: unsupported Windows version: only Windows XP and above supported"
		isFatalError "Windows version not supported"
	endif
endif

if $OS$ = "Linux"
	set $distrotype$ = getLinuxDistroType
	set $linuxInfo$ = getLinuxVersionMap
	set $distCodeName$ = getValue("Codename", $linuxInfo$)
	set $distRelease$ = getValue("Release", $linuxInfo$)
	set $distroName$  = getValue("Distributor ID", $linuxInfo$)
	set $distroOS$  = getValue("operating system", $linuxInfo$)
	set $distroarch$  = getValue("machine", $linuxInfo$)
endif

if $OS$ = "macos"
	set $macosInfo$ = getMacosVersionMap
endif


comment "Detect if we run in opsi service mode"
if "%installingProdName%" = ""
	comment "Running standalone"
	set $write2file$ = "on"
else
	set $write2file$ = "off"
	set $clientId$="%opsiserviceUser%"
endif

setloglevel = $Midloglevel$


if $readfromfile$ = "off"
	if $OS$ = "Windows_NT"
		message "Collecting Windows OS info ..."
		get_windows_os_info()

		setloglevel = $Midloglevel$

		if GetSystemType = "64 Bit System"
			message "Collecting 64 Bit products ..."
			set $uninstKeys$ = getRegistryKeyList64($uninstkey$)
			message "Collecting 64 Bit product details ..."
			set $architecture$ = "x64"
			set $subversion$ = ""
			set $Language$ = ""
			for %currentKey% in $uninstKeys$ do get_windows_products_64("%currentKey%")
		endif

		message "Collecting 32 Bit products ..."
		set $uninstKeys$ = getRegistryKeyList32($uninstkey$)
		setloglevel = $Highloglevel$


		message "Collecting 32 Bit product details ..."
		set $architecture$ = "x86"
		set $subversion$ = ""
		set $Language$ = ""
		for %currentKey% in $uninstKeys$ do get_windows_products_32("%currentKey%")
		setloglevel = $Highloglevel$

		PowerShellCall('Get-AppxPackage /?')
		if ("0" = GetLastExitcode)
			message "Collecting Appx / Msix product details ...(takes a while)"
			get_windows_appx_infos()
		endif
		setloglevel = $Highloglevel$

		if CompareDotSeparatedNumbers(GetMsVersionInfo,">=","6")
			if $include_win_hotfixes$ = "true"
				message "Collecting hotfixes ..."get_linux_products_redhat
				get_windows_hotfix_infos()
				setloglevel = $Highloglevel$
			endif
		endif
	endif

	if $OS$ = "Linux"
		message "Collecting Linux OS info ..."
		get_linux_os_info()

		message "Collecting products ..."
		if $distrotype$ = "debian"
			setloglevel = $Midloglevel$
			set $outLines$ = getOutstreamFromSection("shellInAnIcon_debian")
			for %aktline% in $outLines$ do get_linux_products_debian("%aktline%")
			setloglevel=$Highloglevel$
		endif
		if $distrotype$ = "suse"
			setloglevel = $Midloglevel$
			set $outLines$ = getOutstreamFromSection("shellInAnIcon_suse")
			for %aktline% in $outLines$ do get_linux_products_suse("%aktline%")
			setloglevel=$Highloglevel$
		endif
		if $distrotype$ = "redhat"
			setloglevel = $Midloglevel$
			set $outLines$ = getOutstreamFromSection("shellInAnIcon_redhat")
			for %aktline% in $outLines$ do get_linux_products_redhat("%aktline%")
			setloglevel=$Highloglevel$
		endif
	endif

	if $OS$ = "macos"
		message "Collecting macOS OS info ..."
		get_macos_os_info()

		message "Collecting products #1 ..."
		setloglevel = $Midloglevel$
		set $outLines$ = shellCall('pkgutil --pkgs')
		for %aktline% in $outLines$ do get_macos_products_pkgutil("%aktline%")

		message "Collecting products #2 ..."
		set $outLines$ = shellCall('ls -1 /Applications/*/Info.plist')
		; this gives 90% binary files:
		;set $outLines$ = listFiles("/Applications","Info.plist","True")
		message "Collecting products #3 ..."
		for %aktline% in $outLines$ do get_macos_products_info_plist("%aktline%")
		if fileExists("/usr/local/bin/brew")
			message "collecting products #3 ..."
			set $outLines$ = shellCall("sudo -H -u opsisetupadmin brew list -1 --versions")
			for %aktline% in $outLines$ do get_macos_products_brew("%aktline%")
		endif
		setloglevel=$Highloglevel$
	endif

	setloglevel = $Midloglevel$
	comment "Convert object list to json array ..."
	set $softwareObjectArray$ = jsonStringListToJsonArray($softwareObjectList$)
	set $softwareOnClientObjectArray$ = jsonStringListToJsonArray($softwareOnClientObjectList$)
else
	comment "Read from file - only for debugging"
	setloglevel=$Highloglevel$
	set $softwareObjectArray$ = strLoadTextFileWithEncoding("%opsiTmpDir%\auditsoftware_%PCName%.json","utf8")
	set $softwareOnClientObjectArray$ = strLoadTextFileWithEncoding("%opsiTmpDir%\auditsoftwareOnClient_%PCName%.json","utf8")
	set $write2file$ = "off"
	set $usefilebuffer$ = "off"
	setloglevel = $Midloglevel$
endif
if $write2file$ = "on"
	message "Writing results to file ..."
	Files_del_old
	if not (saveTextFileWithEncoding(createStringList($softwareObjectArray$),"%opsiTmpDir%\auditsoftware_%PCName%.json","utf8"))
		logerror "Could not save file: %opsiTmpDir%\auditsoftware_%PCName%.json"
	endif
	if not (saveTextFileWithEncoding(createStringList($softwareOnClientObjectArray$),"%opsiTmpDir%\auditsoftwareOnClient_%PCName%.json","utf8"))
		logerror "Could not save file: %opsiTmpDir%\auditsoftwareOnClient_%PCName%.json"
	endif
else
	setloglevel = $Midloglevel$
	message "Sending results to service ..."
	if $usefilebuffer$ = "on"
		comment "Use file buffer ..."
		Files_del_old
		comment "Write file buffer ..."
		markErrorNumber
		if not (saveTextFileWithEncoding(createStringList($softwareObjectArray$),"%opsiTmpDir%\auditsoftware_%PCName%.json","utf8"))
			logerror "Could not save file: %opsiTmpDir%\auditsoftware_%PCName%.json"
		endif
		if not (saveTextFileWithEncoding(createStringList($softwareOnClientObjectArray$),"%opsiTmpDir%\auditsoftwareOnClient_%PCName%.json","utf8"))
			logerror "Could not save file: %opsiTmpDir%\auditsoftwareOnClient_%PCName%.json"
		endif
		if errorsOccurredSinceMark = 0
			comment "Read file buffer ..."
			set $softwareObjectArray$ = strLoadTextFileWithEncoding("%opsiTmpDir%\auditsoftware_%PCName%.json","utf8")
			set $softwareOnClientObjectArray$ = strLoadTextFileWithEncoding("%opsiTmpDir%\auditsoftwareOnClient_%PCName%.json","utf8")
		else
			logerror "Abort due to save errors"
			isFatalError "save file failed"
		endif
	endif
	comment "Mask single quotes by double single quotes before sending ...."
	set $softwareObjectArray$ = stringReplace($softwareObjectArray$, "'", "''")
	set $softwareOnClientObjectArray$ = stringReplace($softwareOnClientObjectArray$, "'", "''")
	setloglevel = $Highloglevel$

	if $debug_send$ = "true"
		setloglevel = $Midloglevel$
		comment "One servicall per object, because debug_send is set"
		markErrorNumber
		opsiservicecall_auditSoftwareOnClient_setObsolete
		if errorsOccurredSinceMark > 0
			isFatalError
		endif
		set $serviceMethod$ = "auditSoftware_createObjects"
		set $softwareObjectList$ = jsonAsArrayToStringList($softwareObjectArray$)
		for %curObject% in $softwareObjectList$ do opsiservicecall_create_curObject
		if errorsOccurredSinceMark > 0
			isFatalError
		endif
		set $serviceMethod$ = "auditSoftwareOnClient_createObjects"
		set $softwareObjectList$ = jsonAsArrayToStringList($softwareOnClientObjectArray$)
		for %curObject% in $softwareObjectList$ do opsiservicecall_create_curObject
		if errorsOccurredSinceMark > 0
			isFatalError
		endif
	else
		setloglevel = $Highloglevel$
		markErrorNumber
		opsiservicecall_auditSoftwareOnClient_setObsolete
		if errorsOccurredSinceMark > 0
			isFatalError
		endif
		opsiservicecall_auditSoftware_createObjects
		if errorsOccurredSinceMark > 0
			isFatalError
		endif
		opsiservicecall_auditSoftwareOnClient_createObjects
		if errorsOccurredSinceMark > 0
			isFatalError
		endif
	endif

endif
Files_del_temp

if $isfatal$ = "true"
	isFatalError $fatalmessage$
endif

; ---------- end of main program -------------------------

;
[shellInAnIcon_debian]
# dpkg-query -W -f='${Package} ${Version}\t${ARCHITECTURE}\t${STATUS}\n'
# dpkg-query -W -f='${Package} ${Version}\t${ARCHITECTURE}\t${INSTALLED-SIZE}\n'
dpkg-query -W -f='${Package} ${Version}\t${ARCHITECTURE}\t${INSTALLED-SIZE}\t${db:Status-Abbrev}\n'

[shellInAnIcon_suse]
zypper se -i -s

[shellInAnIcon_redhat]
yum list installed

[Files_del_temp]
delete "%opsiTmpDir%\swaudit_keys.ini"

[opsiservicecall_auditSoftwareOnClient_setObsolete]
"method": "auditSoftwareOnClient_setObsolete"
"params": [
		"$clientId$"
	]


[opsiservicecall_auditSoftware_createObjects]
"method": "auditSoftware_createObjects"
"params": [
		'$softwareObjectArray$'
	]


[opsiservicecall_auditSoftwareOnClient_createObjects]
"method": "auditSoftwareOnClient_createObjects"
"params": [
		'$softwareOnClientObjectArray$'
	]

[opsiservicecall_create_curObject]
"method": "$serviceMethod$"
"params": [
		'[%curObject%]'
	]

[Files_del_old]
delete -f "%opsiTmpDir%\auditsoftware_%PCName%.json"
delete -f "%opsiTmpDir%\auditsoftwareOnClient_%PCName%.json"
delete -f "%opsiTmpDir%\auditsoftware_%PCName%.txt"
delete -f "%opsiTmpDir%\auditsoftwareOnClient_%PCName%.txt"

[DosInAnIcon_ver]
ver


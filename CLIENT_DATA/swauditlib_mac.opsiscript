; Copyright (c) uib GmbH <info@uib.de>
; License: AGPL-3.0

encoding=utf8


DefFunc get_macos_os_info() : void
	init_vars()
	setloglevel=$Midloglevel$

	DefVar $macosRelease$ = getValue("Release", $macosInfo$)
	DefStringList $versionParts$ = splitString($macosRelease$, ".")
	DefVar $macosMajorVersion$ = takeString(0, $versionParts$)

	if ($macosMajorVersion$ <= "10")
		Set $macosMajorVersion$ = $macosMajorVersion$ + "." + takeString(1, $versionParts$)
	endif

	Set $displayName$ = "macOS " + $macosMajorVersion$
	set $displayVersion$ = $macosRelease$
	Switch getOSArchitecture
		Case "x86_32"
			set $architecture$ = "x86"
		EndCase
		Case "x86_64"
			set $architecture$ = "x64"
		EndCase
		Case "arm_64"
			set $architecture$ = "arm64"
		EndCase
		DefaultCase
			set $architecture$ = ""
		EndCase
	EndSwitch
	Set $isOperatingSystem$ = "true"

	add_audit_objects()

	Set $isOperatingSystem$ = "false"

Endfunc


DefFunc get_macos_products_pkgutil($currentKey$ : string) : void
	setloglevel=$Midloglevel$
	if not ($currentKey$ = "")
		init_vars()
		set $resultlist$ = shellCall('pkgutil --pkg-info '+$currentKey$)
		set $displayName$ = getValueBySeparator('package-id',':',$resultlist$)
		if not ($displayName$ = '')
			set $displayVersion$ = getValueBySeparator('version',':',$resultlist$)
			set $winSoftwareId$ = $currentKey$
			set $architecture$ = "x64"
			add_audit_objects()
		endif
	endif
Endfunc

DefFunc getswdetails4_macos2($currentKey$ : string) : void
	setloglevel=$Midloglevel$
	if not ($currentKey$ = "")
		init_vars()
		;set $resultlist$ = shellCall('pkgutil --pkg-info %aktline%')
		set $displayName$ = ExtractFileName($currentKey$)
		if not ($displayName$ = '')
			set $winSoftwareId$ = $displayName$
			set $architecture$ = "x64"
			add_audit_objects()
		endif
	endif
Endfunc

DefFunc get_macos_products_info_plist($currentKey$ : string) : void
	DefStringlist $outlist$
	DefVar $outstr$
	setloglevel=$Midloglevel$
	if fileexists($currentKey$)
		set $outlist$ = shellCall('file -b '+$currentKey$)
		set $outstr$ = takeFirstStringContaining($outlist$,'XML 1.0 document text, ASCII text')
		if not ($outstr$ = "")
			init_vars()
			set $resultlist$ = loadtextfile($currentKey$)
			set $index$ = getIndexFromListByContaining($resultlist$,"<key>CFBundleName</key>")
			if isNumber($index$)
				set $index$ = calculate($index$+" + 1")
				set $tmp$ = takestring($index$,$resultlist$)
				set $tmp$ = stringReplace($tmp$, "<string>", "")
				set $tmp$ = stringReplace($tmp$, "</string>", "")
				set $displayName$ = trim($tmp$)
			endif
			set $index$ = getIndexFromListByContaining($resultlist$,"<key>CFBundleShortVersionString</key>")
			if isNumber($index$)
				set $index$ = calculate($index$+" + 1")
				set $tmp$ = takestring($index$,$resultlist$)
				set $tmp$ = stringReplace($tmp$, "<string>", "")
				set $tmp$ = stringReplace($tmp$, "</string>", "")
				set $version$ = trim($tmp$)
			endif
			set $index$ = getIndexFromListByContaining($resultlist$,"<key>CFBundleIdentifier</key>")
			if isNumber($index$)
				set $index$ = calculate($index$+" + 1")
				set $tmp$ = takestring($index$,$resultlist$)
				set $tmp$ = stringReplace($tmp$, "<string>", "")
				set $tmp$ = stringReplace($tmp$, "</string>", "")
				set $winSoftwareId$ = trim($tmp$)
			endif
			set $architecture$ = "x64"
			add_audit_objects()
		endif
	endif
Endfunc

DefFunc get_macos_products_brew($currentKey$ : string) : void
	setloglevel=$Midloglevel$
	if not ($currentKey$ = "")
		init_vars()
		set $resultlist$ = splitstringOnWhitespace($currentKey$)
		set $displayName$ = takeString(0,$resultlist$)
		set $version$ = takeString(1,$resultlist$)
		if not ($displayName$ = '')
			set $winSoftwareId$ = "(Homebrew) "+$displayName$
			set $architecture$ = "x64"
			add_audit_objects()
		endif
	endif
Endfunc

